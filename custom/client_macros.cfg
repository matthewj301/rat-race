[include calibration_macros.cfg]
[include custom_vars.cfg]

[gcode_macro RESTORE_CUSTOM_VARIABLE_DEFAULTS]
description: Restores CustomVariable macro default values, to be run after a print completes
gcode:
  SET_GCODE_VARIABLE MACRO=CustomVariables VARIABLE=ercf_tool VALUE=-1
  SET_GCODE_VARIABLE MACRO=CustomVariables VARIABLE=filament_type VALUE='"not_set"'


[gcode_macro ECHO_CUSTOM_VARS]
description: Echo custom variables to the console.
gcode:
  {% for var, value in printer["gcode_macro CustomVariables"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}

[gcode_macro ECHO_MMU_VARS]
description: Echo MMU variables to the console for debugging.
gcode:
  {% for var, value in printer["gcode_macro _MMU_Variables"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}


[gcode_macro CIRCULATE_CHAMBER]
gcode:
  RESPOND MSG="Circulating chamber air"
  UPDATE_DELAYED_GCODE ID=NEVERMORE_FILTER_DELAYED_STOP DURATION=0
  NEVERMORE_FILTER_START
  CHAMBER_FANS_START

[gcode_macro STOP_CHAMBER_CIRCULATION]
gcode:
  CHAMBER_FANS_STOP
  UPDATE_DELAYED_GCODE ID=NEVERMORE_FILTER_DELAYED_STOP DURATION=600

[gcode_macro M109]
description: This makes Klipper resume immediately after the hotend reaches the specified temp. https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
description: This makes Klipper resume immediately after the bed reaches the specified temp. https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro MAYBE_LOAD_SKEW_PROFILE]
description: Load skew profile for a specific filament if defined.
gcode:
  {% if params.FILAMENT_TYPE is defined %} 
      {% set local_filament_type = params.FILAMENT_TYPE|string %}
  {% else %}
    {% set local_filament_type = printer["gcode_macro CustomVariables"].filament_type|string %}
  {% endif %}
  {% if local_filament_type == "PLA" %}
        {% if printer["gcode_macro CustomVariables"].pla_skew_profile is defined %}
          RESPOND MSG="Loading PLA skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].pla_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {local_filament_type}."
        {% endif %}
  {% elif local_filament_type == "ASA" %}
      {% if printer["gcode_macro CustomVariables"].asa_skew_profile is defined %}
          RESPOND MSG="Loading ASA skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].asa_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {local_filament_type}."
        {% endif %}
    {% elif local_filament_type == "ABS" %}
      {% if printer["gcode_macro CustomVariables"].abs_skew_profile is defined %}
          RESPOND MSG="Loading {local_filament_type} skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].abs_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {local_filament_type}."
        {% endif %}
  {% elif local_filament_type == "PETG" %}
     {% if printer["gcode_macro CustomVariables"].petg_skew_profile is defined %}
          RESPOND MSG="Loading PETG skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].petg_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {local_filament_type}."
        {% endif %}
  {% else %}
      RESPOND MSG="No skew profile defined for filament {local_filament_type}. End of else statement"
  {% endif %}

[gcode_macro MAYBE_CLEAR_SKEW_PROFILE]
description: Clear skew profile if any was loaded.
gcode:
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    RESPOND MSG="Clearing skew profile."
    SET_SKEW CLEAR=1
  {% endif %}

[gcode_macro SAFE_Z_AND_RETRACT]
gcode:
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_hop = printer["gcode_macro RatOS"].end_print_park_z_hop|float %}
  {% if act_z < (max_z - z_hop) %}
      {% set z_safe = z_hop %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  # Relative positioning
  G91
  # Retract the filament a bit if extruder is ready before lifting the nozzle.
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G0 E-4 F3600
  {% endif %}
  # Move to safe Z position
  G0 Z{z_safe} F7200
  # Retract filament even more if extruder is ready
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G0 E-6 F3600
  {% endif %}
  # Back to absolute positioning
  G90

# Macro to calculate the probe min/max/current coordinates

##########################DEPENDENCIES##########################
# 
# This config section is required to output text to the console
# which is used by the macro. If you already have an equivalent
# config section elsewhere, you can comment this one out.
[respond]
# 
################################################################

[gcode_macro GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.settings %}
    # Find probe config in configfile
    {% if config["bltouch"] %}
        # bltouch section found
        {% set probe = config["bltouch"] %}
        {% set has_probe = True %}
    {% elif config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% elif config["beacon"] %}
        # probe section found
        {% set probe = config["beacon"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        {% set stepperx = config["stepper_x"] %}
        {% set steppery = config["stepper_y"] %}
        {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
        {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
        {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
        {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}
        RESPOND MSG="Configured Probe X-Offset {probe.x_offset}"
        RESPOND MSG="Configured Probe Y-Offset {probe.y_offset}"
        {% if probe.z_offset is defined %}
            RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        {% elif probe.trigger_distance is defined %}
            RESPOND MSG="Configured Probe Trigger Distance {probe.trigger_distance}"
        {% endif %}
        RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
        RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"
        # check if printer homed
        {% if "xyz" in printer.toolhead.homed_axes %} 
            {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
            {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
            RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
        {% endif %}
    {% endif %}


[gcode_macro DEPLOY_NOZZLE_CLEANER]
gcode:
   RESPOND MSG="Deploying nozzle cleaner"
   SET_SERVO SERVO=servo_wiper ANGLE={printer["gcode_macro CustomVariables"].nozzle_wiper_deployed_angle}
   SET_GCODE_VARIABLE MACRO=CustomVariables VARIABLE=nozzle_wiper_state VALUE='"deployed"'


[gcode_macro STOW_NOZZLE_CLEANER] 
gcode:
   RESPOND MSG="Stowing nozzle cleaner"
   SET_SERVO SERVO=servo_wiper ANGLE={printer["gcode_macro CustomVariables"].nozzle_wiper_stowed_angle}
   SET_GCODE_VARIABLE MACRO=CustomVariables VARIABLE=nozzle_wiper_state VALUE='"stowed"'



# Nozzle directly over brush: 246, 272
[gcode_macro CLEAN_NOZZLE]
gcode:
   SAVE_GCODE_STATE NAME=nozzle_clean_state
   RESPOND MSG="Start Wiping macro"
   MAYBE_HOME
   
  {% if printer.idle_timeout.state != "Printing" %}
    RESPOND MSG="Heating extruder to 200"
    M104 S200
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=200 MAXIMUM=270
  {% endif %}

   {% if printer.toolhead.position.z|int < 30 %}
         RESPOND MSG="Moving bed down 30mm for servo clearance"
         G90           
         G0 Z30   
   {% endif %}
   DEPLOY_NOZZLE_CLEANER
   G90
   G0 X240 Y272 F15000
   G0 X275 Y272 F15000
   RESPOND MSG="Starting nozzle cleaning!"
   G0 X240 F30000
   G0 x275 F30000
   G0 X240 F30000
   G0 x275 F30000
   G0 X240 F30000
   G0 x275 F30000
   G0 X240 F30000
   G0 x275 F30000
   G0 X240 F30000
   G0 x275 F30000
   G0 X240 F30000
   G0 x275 F30000
   G0 X240 F30000
   G0 x275 F30000

   # Move to the side 
   G0 X246 Y250
   STOW_NOZZLE_CLEANER
   RESPOND MSG="Nozzle cleaning done"
   G92 E0
   
   RESPOND MSG="Moving bed to 2mm from toolhead"
   G0 Z2

   {% if printer.idle_timeout.state != "Printing" %}
   RESPOND MSG="Turning off hotend"
   M104 S0
   {% endif %}
   
   RESTORE_GCODE_STATE NAME=nozzle_clean_state MOVE=1


[delayed_gcode wiper]
initial_duration: 1
gcode:
   SET_SERVO SERVO=servo_wiper ANGLE=165