# Custom Macros
[gcode_macro CustomVariables]
description: Custom variable storage macro
variable_pla_skew_profile: "pla_skew"
variable_asa_skew_profile: "asa_skew"
#variable_petg_skew_profile: 
gcode:
  ECHO_CUSTOM_VARS

[gcode_macro ECHO_CUSTOM_VARS]
description: Echo custom variables to the console.
gcode:
  {% for var, value in printer["gcode_macro CustomVariables"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}

[gcode_macro M109]
description: This makes Klipper resume immediately after the hotend reaches the specified temp. https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
description: This makes Klipper resume immediately after the bed reaches the specified temp. https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro ERCF_TEST_FILAMENT_TIP]
description: Test filament tip
gcode:
    RESPOND MSG="Testing filament tip"
    ERCF_FORM_TIP_STANDALONE

[gcode_macro ERCF_TEST_GEAR_STEPPER]
description: Test ERCF gear stepper motor
gcode:
  STEPPER_BUZZ STEPPER="manual_stepper gear_stepper"

[gcode_macro ERCF_TEST_SELECTOR_STEPPER]
description: Test ERCF selector stepper motor
gcode:
  STEPPER_BUZZ STEPPER="manual_stepper selector_stepper"

[gcode_macro ERCF_TEST_LOAD_REPEATABILITY]
description: Test ERCF load repeatability with random gates
gcode:
  RESPOND MSG="Testing ERCF load repeatability"
  ERCF_HOME
  ERCF_TEST_LOAD_SEQUENCE LOOP=3 RANDOM=1 FULL=1

[gcode_macro MAYBE_LOAD_SKEW_PROFILE]
description: Load skew profile for a specific filament if defined.
gcode:
  {% if params.FILAMENT_TYPE == "PLA" %}
        {% if printer["gcode_macro CustomVariables"].pla_skew_profile is defined %}
          RESPOND MSG="Loading PLA skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].pla_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% elif params.FILAMENT_TYPE == "ASA" %}
      {% if printer["gcode_macro CustomVariables"].asa_skew_profile is defined %}
          RESPOND MSG="Loading ASA skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].asa_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% elif params.FILAMENT_TYPE == "PETG" %}
     {% if printer["gcode_macro CustomVariables"].petg_skew_profile is defined %}
          RESPOND MSG="Loading PETG skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].petg_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% else %}
      RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
  {% endif %}

[gcode_macro MAYBE_CLEAR_SKEW_PROFILE]
description: Clear skew profile if any was loaded.
gcode:
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    RESPOND MSG="Clearing skew profile."
    SET_SKEW CLEAR=1
  {% endif %}

[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
  {% if params.FILAMENT_TYPE == "ABS" or params.FILAMENT_TYPE == "ASA" %}
		NEVERMORE_FILTER_START
	{% endif %}
  CASE_LIGHTS_ON
  HOTEND_LIGHTS_STATUS_PRINTING
  MAYBE_LOAD_SKEW_PROFILE FILAMENT_TYPE={params.FILAMENT_TYPE}
  ERCF_CHANGE_TOOL STANDALONE=0 TOOL={params.ERCF_TOOL}
  PRIME_BLOB

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  # Define params
  {% set FILAMENT_TYPE = params.FILAMENT|default(PLA)|string %}
  {% set ERCF_TOOL = params.CURRENT_EXTRUDER|default(0)|int %}
  {% set BED_TEMP = params.BED_TEMP|default(printer.heater_bed.target, true) %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer.extruder.target, true) %}

  RESPOND MSG="FILAMENT TYPE: {FILAMENT_TYPE}"
  RESPOND MSG="ERCF TOOL: {ERCF_TOOL}"
  RESPOND MSG="BED TEMP: {BED_TEMP}"
  RESPOND MSG="EXTRUDER TEMP: {EXTRUDER_TEMP}"

  CLEAR_PAUSE
  {% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
  G90
  {% endif %}
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  {% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
  STOWABLE_PROBE_BEGIN_BATCH
  {% endif %}
  # Home if needed
  MAYBE_HOME
  {% if params.CHAMBER_TEMP is defined %}
  _START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp}
  {% endif %}
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Wait for bed to heat up
  M190 S{BED_TEMP}
  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH
  {% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
  STOWABLE_PROBE_END_BATCH
  {% endif %}
  # Start heating extruder
  M104 S{EXTRUDER_TEMP}
  # Run the customizable "PARK" macro
  _START_PRINT_PARK
  # Wait for extruder to heat up
  M117 Heating Extruder...
  RESPOND MSG="Heating Extruder..."
  M109 S{EXTRUDER_TEMP}
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDER ERCF_TOOL={ERCF_TOOL} FILAMENT_TYPE={FILAMENT_TYPE}
  M117 Printing...
  RESPOND MSG="Printing..."
  RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0

[gcode_macro _END_PRINT_BEFORE_HEATERS_OFF]
gcode:
    RESPOND MSG="Cleaning up..."
    # Park toolhead
    _END_PRINT_PARK
    # Eject filament via ERCF
    ERCF_EJECT
    # Part cooling fan off
    M107
    # Steppers off
    M84

[gcode_macro END_PRINT]
description: End print procedure
gcode:
  SAVE_GCODE_STATE NAME=end_print_state
  SAFE_Z_AND_RETRACT
  _END_PRINT_BEFORE_HEATERS_OFF
  TURN_OFF_HEATERS
  CASE_LIGHTS_OFF
  MAYBE_CLEAR_SKEW_PROFILE
  # Clear bed mesh so that G28 doesn't fail.
  BED_MESH_CLEAR
  UPDATE_DELAYED_GCODE ID=nevermore_filter_delayed_stop DURATION=1800
  HOTEND_LIGHTS_OFF
  RESTORE_GCODE_STATE NAME=end_print_state

[gcode_macro SAFE_Z_AND_RETRACT]
gcode:
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_hop = printer["gcode_macro RatOS"].end_print_park_z_hop|float %}
  {% if act_z < (max_z - z_hop) %}
      {% set z_safe = z_hop %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  # Relative positioning
  G91
  # Retract the filament a bit before lifting the nozzle.
  G1 E-2 F3600
  # Move to safe Z position
  G0 Z{z_safe} F3600
  # Retract filament even more
  G1 E-2 F3600
  # Back to absolute positioning
  G90

[gcode_macro RESUME]
description: Resumes the print if the printer is paused and unlocks ERCF if it is locked.
rename_existing: RESUME_BASE
gcode:
  ERCF_UNLOCK
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  # Prime
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
    G90
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  RESUME_BASE