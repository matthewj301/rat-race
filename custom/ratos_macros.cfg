[include client_macros.cfg]

[ratos_homing]
axes: xyz
z_hop: 15
z_hop_speed: 15
gcode:
	{% set x_homed = 'x' in printer.toolhead.homed_axes %}
	{% set y_homed = 'y' in printer.toolhead.homed_axes %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printer.toolhead.axis_maximum.x / 2 %}
	{% endif %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printer.toolhead.axis_maximum.y / 2 %}
	{% endif %}
	{% set z_probe = printer["gcode_macro RatOS"].z_probe|lower %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set homing_x = printer["gcode_macro RatOS"].homing_x|lower %}
	{% set homing_y = printer["gcode_macro RatOS"].homing_y|lower %}
	{% set homing = printer["gcode_macro RatOS"].homing|lower %}
	{% set prev_stop_on_error = printer["gcode_macro RatOS"].stowable_probe_stop_on_error %}

	# Make stowable probe assertion failures cause an emergency stop
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE=True

	M400                        # Wait for moves to finish
	G90                         # Absolute positioning

    {% if params.Y is defined or params.X is not defined and params.Z is not defined %}
		RESPOND MSG="Homing Y"
		{% if homing_y == 'endstop' or homing == 'endstops' %}
			G28 Y
		{% elif homing_y == 'sensorless' or homing == 'sensorless' %}
			HOME_Y_SENSORLESS
		{% else %}
			{ action_emergency_stop("expected RatOS variable_homing_y to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_y, homing)) }
		{% endif %}
		{% set y_homed = True %}
		G0 Y{safe_home_y} F{speed}
		M400 # Wait for moves to finish
	{% endif %}

	{% if params.X is defined or params.Y is not defined and params.Z is not defined %}
		RESPOND MSG="Homing X"
		{% if homing_x == 'endstop' or homing == 'endstops' %}
			G28 X
		{% elif homing_x == 'sensorless' or homing == 'sensorless' %}
			HOME_X_SENSORLESS
		{% else %}
			{ action_emergency_stop("expected RatOS variable_homing_x to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_x, homing)) }
		{% endif %}
		{% set x_homed = True %}
		G0 X{safe_home_x} F{speed}
		M400 # Wait for moves to finish
	{% endif %}

	{% if params.Z is defined or params.Y is not defined and params.X is not defined %}
		RESPOND MSG="Homing Z"
		{% if x_homed == False or y_homed == False %}
			M118 X and Y must be homed before homing Z
			{ action_emergency_stop("X and Y must be homed before homing Z") }
		{% else %}
			{% if z_probe == "stowable" %}
				DEPLOY_PROBE
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_hop_speed}
				STOW_PROBE
			{% else %}
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_hop_speed}
			{% endif %}
		{% endif %}
	{% endif %}
	
	# Reset stowable probe stop on error state
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE={prev_stop_on_error}


[gcode_macro _USER_START_PRINT_BEFORE_HOMING]
description:
gcode:
  {% set FILAMENT_TYPE = printer["gcode_macro CustomVariables"].filament_type %}
  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %}
    CIRCULATE_CHAMBER
  {% endif %}

[gcode_macro _USER_START_PRINT_AFTER_HEATING_BED]
description: Custom gcode that runs right after the bed has reached temp, before the internal _START_PRINT_AFTER_HEATING_BED
gcode:
  {% set FILAMENT_TYPE = printer["gcode_macro CustomVariables"].filament_type %}
  {% set ERCF_TOOL = printer["gcode_macro CustomVariables"].ercf_tool %}
  CLEAR_PAUSE

  {% if FILAMENT_TYPE == "not_set" %}
    RESPOND MSG="filament_type not set by slicer, aborting print..."
    CANCEL_PRINT
  {% else %}
    RESPOND MSG="FILAMENT TYPE SET: {FILAMENT_TYPE}"
    {% if ERCF_TOOL == -1 %}
      RESPOND MSG="ercf_tool not set by slicer, aborting print..."
      CANCEL_PRINT
    {% endif %}
  {% endif %}

[gcode_macro _USER_START_PRINT_AFTER_HEATING_EXTRUDER]
description: Custom gcode that runs just before _START_PRINT_AFTER_HEATING_EXTRUDER
gcode:
  {% set SLICER = printer["gcode_macro CustomVariables"].slicer %}
  {% set FILAMENT_TYPE = printer["gcode_macro CustomVariables"].filament_type %}
  {% set ERCF_TOOL = printer["gcode_macro CustomVariables"].ercf_tool %}

  RESPOND MSG="SLICER: {SLICER}"
  RESPOND MSG="FILAMENT TYPE: {FILAMENT_TYPE}"
  RESPOND MSG="ERCF TOOL: {ERCF_TOOL}"
  
  _START_PRINT_PARK
  MAYBE_LOAD_SKEW_PROFILE FILAMENT_TYPE={FILAMENT_TYPE}

  RESPOND MSG="{SLICER} specified, using slicer-defined tip forming settings"
  MMU_CHANGE_TOOL TOOL={ERCF_TOOL}


[gcode_macro _USER_END_PRINT_BEFORE_HEATERS_OFF]
description: Custom gcode that runs right before the END_PRINT_BEFORE_HEATERS_OFF macro is called in END_PRINT
gcode:
    RESPOND MSG="Cleaning up..."
    SAFE_Z_AND_RETRACT
    _END_PRINT_PARK
    MMU_EJECT

[gcode_macro _USER_END_PRINT_AFTER_HEATERS_OFF]
description: Custom gcode that runs right after right before the END_PRINT_AFTER_HEATERS_OFF macro is called in END_PRINT
gcode:
  MAYBE_CLEAR_SKEW_PROFILE
  STOP_CHAMBER_CIRCULATION
  RESTORE_CUSTOM_VARIABLE_DEFAULTS
  Z_OFFSET_APPLY_PROBE