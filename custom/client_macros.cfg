[include calibration_macros.cfg]

# Custom Macros
[gcode_macro CustomVariables]
description: Custom variable storage macro
variable_slicer: "No slicer"
variable_filament_type: "not_set"
variable_ercf_tool: -1
#variable_pla_skew_profile: "pla_skew"
variable_abs_skew_profile: "abs_skew_profile"
# ABS SET_SKEW XY=141.445,141.398,99.621 XZ=141.412,141.431,99.621 YZ=141.464,141.379,99.71
#variable_asa_skew_profile: "asa_skew"
#variable_petg_skew_profile: 
gcode:
  ECHO_CUSTOM_VARS

[gcode_macro RESTORE_CUSTOM_VARIABLE_DEFAULTS]
description: Restores CustomVariable macro default values, to be run after a print completes
gcode:
  SET_GCODE_VARIABLE MACRO=CustomVariables VARIABLE=ercf_tool VALUE=-1
  SET_GCODE_VARIABLE MACRO=CustomVariables VARIABLE=filament_type VALUE='"not_set"'


[gcode_macro ECHO_CUSTOM_VARS]
description: Echo custom variables to the console.
gcode:
  {% for var, value in printer["gcode_macro CustomVariables"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}

[gcode_macro ECHO_MMU_VARS]
description: Echo MMU variables to the console for debugging.
gcode:
  {% for var, value in printer["gcode_macro _MMU_Variables"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}


[gcode_macro CIRCULATE_CHAMBER]
gcode:
  RESPOND MSG="Circulating chamber air"
  UPDATE_DELAYED_GCODE ID=NEVERMORE_FILTER_DELAYED_STOP DURATION=0
  NEVERMORE_FILTER_START
  CHAMBER_FANS_START

[gcode_macro STOP_CHAMBER_CIRCULATION]
gcode:
  CHAMBER_FANS_STOP
  UPDATE_DELAYED_GCODE ID=NEVERMORE_FILTER_DELAYED_STOP DURATION=600

[gcode_macro M109]
description: This makes Klipper resume immediately after the hotend reaches the specified temp. https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
description: This makes Klipper resume immediately after the bed reaches the specified temp. https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro MAYBE_LOAD_SKEW_PROFILE]
description: Load skew profile for a specific filament if defined.
gcode:
  {% if params.FILAMENT_TYPE == "PLA" %}
        {% if printer["gcode_macro CustomVariables"].pla_skew_profile is defined %}
          RESPOND MSG="Loading PLA skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].pla_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% elif params.FILAMENT_TYPE == "ASA" %}
      {% if printer["gcode_macro CustomVariables"].asa_skew_profile is defined %}
          RESPOND MSG="Loading ASA skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].asa_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
    {% elif params.FILAMENT_TYPE == "ABS" %}
      {% if printer["gcode_macro CustomVariables"].abs_skew_profile is defined %}
          RESPOND MSG="Loading {params.FILAMENT_TYPE} skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].abs_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% elif params.FILAMENT_TYPE == "PETG" %}
     {% if printer["gcode_macro CustomVariables"].petg_skew_profile is defined %}
          RESPOND MSG="Loading PETG skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].petg_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% else %}
      RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
  {% endif %}

[gcode_macro MAYBE_CLEAR_SKEW_PROFILE]
description: Clear skew profile if any was loaded.
gcode:
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    RESPOND MSG="Clearing skew profile."
    SET_SKEW CLEAR=1
  {% endif %}

[gcode_macro SAFE_Z_AND_RETRACT]
gcode:
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_hop = printer["gcode_macro RatOS"].end_print_park_z_hop|float %}
  {% if act_z < (max_z - z_hop) %}
      {% set z_safe = z_hop %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  # Relative positioning
  G91
  # Retract the filament a bit if extruder is ready before lifting the nozzle.
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-4 F3600
  {% endif %}
  # Move to safe Z position
  G0 Z{z_safe} F7200
  # Retract filament even more if extruder is ready
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-6 F3600
  {% endif %}
  # Back to absolute positioning
  G90

# Macro to calculate the probe min/max/current coordinates

##########################DEPENDENCIES##########################
# 
# This config section is required to output text to the console
# which is used by the macro. If you already have an equivalent
# config section elsewhere, you can comment this one out.
[respond]
# 
################################################################

[gcode_macro GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.settings %}
    # Find probe config in configfile
    {% if config["bltouch"] %}
        # bltouch section found
        {% set probe = config["bltouch"] %}
        {% set has_probe = True %}
    {% elif config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% elif config["beacon"] %}
        # probe section found
        {% set probe = config["beacon"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        {% set stepperx = config["stepper_x"] %}
        {% set steppery = config["stepper_y"] %}
        {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
        {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
        {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
        {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}
        RESPOND MSG="Configured Probe X-Offset {probe.x_offset}"
        RESPOND MSG="Configured Probe Y-Offset {probe.y_offset}"
        {% if probe.z_offset is defined %}
            RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        {% elif probe.trigger_distance is defined %}
            RESPOND MSG="Configured Probe Trigger Distance {probe.trigger_distance}"
        {% endif %}
        RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
        RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"
        # check if printer homed
        {% if "xyz" in printer.toolhead.homed_axes %} 
            {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
            {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
            RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
        {% endif %}
    {% endif %}
  