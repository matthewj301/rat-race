# Custom Macros
[gcode_macro CustomVariables]
description: Custom variable storage macro
variable_filament_type: "not_set"
variable_ercf_tool: -1
variable_z_offset_ratrig_texured: 1.995
variable_z_offset_fulament_dual_sided_textured: 1.98
variable_pla_skew_profile: "pla_skew"
#variable_asa_skew_profile: "asa_skew"
#variable_petg_skew_profile: 
gcode:
  ECHO_CUSTOM_VARS

[gcode_macro RESTORE_CUSTOM_VARIABLE_DEFAULTS]
description: Restores CustomVariable macro default values, to be run after a print completes
gcode:
  SET_GCODE_VARIABLE MACRO=CustomVariables VARIABLE=ercf_tool VALUE=-1
  SET_GCODE_VARIABLE MACRO=CustomVariables VARIABLE=filament_type VALUE='"not_set"'

[gcode_macro ECHO_CUSTOM_VARS]
description: Echo custom variables to the console.
gcode:
  {% for var, value in printer["gcode_macro CustomVariables"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}

[gcode_macro M109]
description: This makes Klipper resume immediately after the hotend reaches the specified temp. https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
description: This makes Klipper resume immediately after the bed reaches the specified temp. https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro ERCF_TEST_GEAR_STEPPER]
description: Test ERCF gear stepper motor
gcode:
  STEPPER_BUZZ STEPPER="manual_stepper gear_stepper"

[gcode_macro ERCF_TEST_SELECTOR_STEPPER]
description: Test ERCF selector stepper motor
gcode:
  STEPPER_BUZZ STEPPER="manual_stepper selector_stepper"

[gcode_macro ERCF_RESET_TOOL_TO_GATE_MAPPING]
description: Reset ERCF Gate-to-Tool mapping, usually used after a print where Endless Spool was triggered
gcode:
  RESPOND MSG="Resetting ERCF Tool-to-Gate mapping"
  ERCF_REMAP_TTG RESET=1

[gcode_macro MAYBE_LOAD_SKEW_PROFILE]
description: Load skew profile for a specific filament if defined.
gcode:
  {% if params.FILAMENT_TYPE == "PLA" %}
        {% if printer["gcode_macro CustomVariables"].pla_skew_profile is defined %}
          RESPOND MSG="Loading PLA skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].pla_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% elif params.FILAMENT_TYPE == "ASA" %}
      {% if printer["gcode_macro CustomVariables"].asa_skew_profile is defined %}
          RESPOND MSG="Loading ASA skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].asa_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% elif params.FILAMENT_TYPE == "PETG" %}
     {% if printer["gcode_macro CustomVariables"].petg_skew_profile is defined %}
          RESPOND MSG="Loading PETG skew profile."
          SKEW_PROFILE LOAD={printer["gcode_macro CustomVariables"].petg_skew_profile}
        {% else %}
          RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
        {% endif %}
  {% else %}
      RESPOND MSG="No skew profile defined for filament {params.FILAMENT_TYPE}."
  {% endif %}

[gcode_macro MAYBE_CLEAR_SKEW_PROFILE]
description: Clear skew profile if any was loaded.
gcode:
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    RESPOND MSG="Clearing skew profile."
    SET_SKEW CLEAR=1
  {% endif %}

[ratos_homing]
axes: xyz
# For Euclid
z_hop: 15
z_hop_speed: 15
gcode:
	{% set x_homed = 'x' in printer.toolhead.homed_axes %}
	{% set y_homed = 'y' in printer.toolhead.homed_axes %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printer.toolhead.axis_maximum.x / 2 %}
	{% endif %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printer.toolhead.axis_maximum.y / 2 %}
	{% endif %}
	{% set z_probe = printer["gcode_macro RatOS"].z_probe|lower %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set homing_x = printer["gcode_macro RatOS"].homing_x|lower %}
	{% set homing_y = printer["gcode_macro RatOS"].homing_y|lower %}
	{% set homing = printer["gcode_macro RatOS"].homing|lower %}
	{% set prev_stop_on_error = printer["gcode_macro RatOS"].stowable_probe_stop_on_error %}

	# Make stowable probe assertion failures cause an emergency stop
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE=True

	M400                        # Wait for moves to finish
	G90                         # Absolute positioning

    {% if params.Y is defined or params.X is not defined and params.Z is not defined %}
		{% if homing_y == 'endstop' or homing == 'endstops' %}
			G28 Y
		{% elif homing_y == 'sensorless' or homing == 'sensorless' %}
			HOME_Y_SENSORLESS
		{% else %}
			{ action_emergency_stop("expected RatOS variable_homing_y to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_y, homing)) }
		{% endif %}
		{% set y_homed = True %}
		G0 Y{safe_home_y} F{speed}
	{% endif %}

	{% if params.X is defined or params.Y is not defined and params.Z is not defined %}
		{% if homing_x == 'endstop' or homing == 'endstops' %}
			G28 X
		{% elif homing_x == 'sensorless' or homing == 'sensorless' %}
			HOME_X_SENSORLESS
		{% else %}
			{ action_emergency_stop("expected RatOS variable_homing_x to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_x, homing)) }
		{% endif %}
		{% set x_homed = True %}
		G0 X{safe_home_x} F{speed}
	{% endif %}

	{% if params.Z is defined or params.Y is not defined and params.X is not defined %}
		RESPOND MSG="Homing Z"
		{% if x_homed == False or y_homed == False %}
			M118 X and Y must be homed before homing Z
			{ action_emergency_stop("X and Y must be homed before homing Z") }
		{% else %}
			{% if z_probe == "stowable" %}
				DEPLOY_PROBE
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_hop_speed}
				STOW_PROBE
			{% else %}
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_hop_speed}
			{% endif %}
		{% endif %}
	{% endif %}
	
	# Reset stowable probe stop on error state
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE={prev_stop_on_error}

[gcode_macro SAFE_Z_AND_RETRACT]
gcode:
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_hop = printer["gcode_macro RatOS"].end_print_park_z_hop|float %}
  {% if act_z < (max_z - z_hop) %}
      {% set z_safe = z_hop %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  # Relative positioning
  G91
  # Retract the filament a bit before lifting the nozzle.
  G1 E-2 F3600
  # Move to safe Z position
  G0 Z{z_safe} F3600
  # Retract filament even more
  G1 E-2 F3600
  # Back to absolute positioning
  G90

[gcode_macro _USER_START_PRINT_AFTER_HEATING_BED]
description: Custom gcode that runs right after the bed has reached temp, before the internal _START_PRINT_AFTER_HEATING_BED
gcode:
  {% set FILAMENT_TYPE = printer["gcode_macro CustomVariables"].filament_type %}
  {% set ERCF_TOOL = printer["gcode_macro CustomVariables"].ercf_tool %}

  {% if FILAMENT_TYPE == "not_set" %}
    RESPOND MSG="filament_type not set by slicer, aborting print..."
    CANCEL_PRINT
  {% else %}
    RESPOND MSG="FILAMENT TYPE SET: {FILAMENT_TYPE}"
    {% if ERCF_TOOL == -1 %}
      RESPOND MSG="ercf_tool not set by slicer, aborting print..."
      CANCEL_PRINT
    {% else %}
      RESPOND MSG="ERCF TOOL SET: {ERCF_TOOL}"
    {% endif %}
  {% endif %}
  # Turn on the part cooling fan during bed-meshing to get rid of any filament droppings left on the build plate
  M117 Turning on part cooling fan to get rid of debris on build plate
  RESPOND MSG="Turning on part cooling fan to get rid of debris on build plate"
  M106 S255

[gcode_macro _USER_START_PRINT_AFTER_HEATING_EXTRUDER]
description: Custom gcode that runs just before _START_PRINT_AFTER_HEATING_EXTRUDER
gcode:
  {% set FILAMENT_TYPE = printer["gcode_macro CustomVariables"].filament_type %}
  {% set ERCF_TOOL = printer["gcode_macro CustomVariables"].ercf_tool %}

  # Turn off part cooling fan
  M117 Turning off part cooling fan
  RESPOND MSG="Turning off part cooling fan"
    # Define local variables

  RESPOND MSG="FILAMENT TYPE: {FILAMENT_TYPE}"
  RESPOND MSG="ERCF TOOL: {ERCF_TOOL}"

  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %}
		NEVERMORE_FILTER_START
  {% endif %}
  _START_PRINT_PARK
  CASE_LIGHTS_ON
  HOTEND_LIGHTS_STATUS_PRINTING
  MAYBE_LOAD_SKEW_PROFILE FILAMENT_TYPE={FILAMENT_TYPE}
  ERCF_CHANGE_TOOL STANDALONE=0 TOOL={ERCF_TOOL}

[gcode_macro _USER_END_PRINT_BEFORE_HEATERS_OFF]
description: Custom gcode that runs right before the END_PRINT_BEFORE_HEATERS_OFF macro is called in END_PRINT
gcode:
    RESPOND MSG="Cleaning up..."
    # Retract and lift toolhead away from print
    SAFE_Z_AND_RETRACT
    # Park toolhead
    _END_PRINT_PARK
    # Eject filament via ERCF
    ERCF_EJECT

[gcode_macro _USER_END_PRINT_AFTER_HEATERS_OFF]
description: Custom gcode that runs right after right before the END_PRINT_AFTER_HEATERS_OFF macro is called in END_PRINT
gcode:
  CASE_LIGHTS_OFF
  MAYBE_CLEAR_SKEW_PROFILE
  UPDATE_DELAYED_GCODE ID=nevermore_filter_delayed_stop DURATION=1800
  HOTEND_LIGHTS_OFF
  RESTORE_CUSTOM_VARIABLE_DEFAULTS
  