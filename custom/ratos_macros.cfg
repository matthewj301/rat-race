[include client_macros.cfg]

[ratos_homing]
axes: xyz
z_hop: 15
z_hop_speed: 15
gcode:
	{% set x_homed = 'x' in printer.toolhead.homed_axes %}
	{% set y_homed = 'y' in printer.toolhead.homed_axes %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printer.toolhead.axis_maximum.x / 2 %}
	{% endif %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printer.toolhead.axis_maximum.y / 2 %}
	{% endif %}
	{% set z_probe = printer["gcode_macro RatOS"].z_probe|lower %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set homing_x = printer["gcode_macro RatOS"].homing_x|lower %}
	{% set homing_y = printer["gcode_macro RatOS"].homing_y|lower %}
	{% set homing = printer["gcode_macro RatOS"].homing|lower %}
	{% set prev_stop_on_error = printer["gcode_macro RatOS"].stowable_probe_stop_on_error %}

	# Make stowable probe assertion failures cause an emergency stop
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE=True

	M400                        # Wait for moves to finish
	G90                         # Absolute positioning

    {% if params.Y is defined or params.X is not defined and params.Z is not defined %}
		RESPOND MSG="Homing Y"
		{% if homing_y == 'endstop' or homing == 'endstops' %}
			G28 Y
		{% elif homing_y == 'sensorless' or homing == 'sensorless' %}
			HOME_Y_SENSORLESS
		{% else %}
			{ action_emergency_stop("expected RatOS variable_homing_y to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_y, homing)) }
		{% endif %}
		{% set y_homed = True %}
		G0 Y{safe_home_y} F{speed}
		M400 # Wait for moves to finish
	{% endif %}

	{% if params.X is defined or params.Y is not defined and params.Z is not defined %}
		RESPOND MSG="Homing X"
		{% if homing_x == 'endstop' or homing == 'endstops' %}
			G28 X
		{% elif homing_x == 'sensorless' or homing == 'sensorless' %}
			HOME_X_SENSORLESS
		{% else %}
			{ action_emergency_stop("expected RatOS variable_homing_x to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_x, homing)) }
		{% endif %}
		{% set x_homed = True %}
		G0 X{safe_home_x} F{speed}
		M400 # Wait for moves to finish
	{% endif %}

	{% if params.Z is defined or params.Y is not defined and params.X is not defined %}
		RESPOND MSG="Homing Z"
		{% if x_homed == False or y_homed == False %}
			M118 X and Y must be homed before homing Z
			{ action_emergency_stop("X and Y must be homed before homing Z") }
		{% else %}
			{% if z_probe == "stowable" %}
				DEPLOY_PROBE
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_hop_speed}
				STOW_PROBE
			{% else %}
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_hop_speed}
			{% endif %}
		{% endif %}
	{% endif %}
	
	# Reset stowable probe stop on error state
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE={prev_stop_on_error}

[gcode_macro RESET_PRINTER_STATE]
description: return printer to start state
gcode:
    M117 Resetting printer state for a clean start.
	RESPOND MSG="Resetting printer state for a clean start."
	CLEAR_PAUSE
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    MAYBE_CLEAR_SKEW_PROFILE

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
	RESET_PRINTER_STATE
    
	{% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
	G90
	{% endif %}
	SAVE_GCODE_STATE NAME=start_print_state
	# Metric values
	G21
	# Absolute positioning
	G90 
	# Set extruder to absolute mode
	M82
    
    CHECK_FILAMENT_TYPE
	MAYBE_CIRCULATE_CHAMBER
	MAYBE_HOME

	FULLY_HEAT_BED BED_TEMP={params.BED_TEMP}
    
    PREHEAT_EXTRUDER_AND_GENERATE_BEACON_MODEL
    Z_TILT_AND_CONTACT_HOME

    _START_PRINT_BED_MESH X0={params.X0} X1={params.X1} Y0={params.Y0} Y1={params.Y1}
        
	_START_PRINT_PARK
    FULLY_HEAT_EXTRUDER EXTRUDER_TEMP={params.EXTRUDER_TEMP}
    
	M117 Printing...
	RESPOND MSG="Printing..."
	RESTORE_GCODE_STATE NAME=start_print_state
    
	SET_EXTRUSION_MODE

    SET_GCODE_OFFSET Z=0.078


[gcode_macro SET_EXTRUSION_MODE]
description: Set extrusion mode based on user configuration
gcode:
	{% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
		M83
	{% else %}
		M82
	{% endif %}
	G92 E0

[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_BASE
gcode:
    END_PRINT
	TURN_OFF_HEATERS
  	_MMU_CLEAR_POSITION
	CLEAR_PAUSE
	#SDCARD_RESET_FILE
	CANCEL_PRINT_BASE
    MAYBE_CLEAR_SKEW_PROFILE

[gcode_macro MAYBE_CIRCULATE_CHAMBER]
description:
gcode:
  {% set FILAMENT_TYPE = printer["gcode_macro CustomVariables"].filament_type %}
  {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %}
    CIRCULATE_CHAMBER
  {% endif %}

[gcode_macro CHECK_FILAMENT_TYPE]
description: Custom gcode that runs right after the bed has reached temp, before the internal PREHEAT_EXTRUDER
gcode:
  {% set FILAMENT_TYPE = printer["gcode_macro CustomVariables"].filament_type %}
  CLEAR_PAUSE

  {% if FILAMENT_TYPE == "not_set" %}
    RESPOND MSG="filament_type not set by slicer, aborting print..."
    CANCEL_PRINT
  {% else %}
    RESPOND MSG="FILAMENT TYPE SET: {FILAMENT_TYPE}"
  {% endif %}

[gcode_macro FULLY_HEAT_BED]
description: heat bed and move bed towards fans based on filament type
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(printer.heater_bed.target, true)  %}
    {% set FILAMENT_TYPE = printer["gcode_macro CustomVariables"].filament_type %}
    
    {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %}
      M117 Moving bed towards fans and heating bed...
      RESPOND MSG="Moving bed towards fans and heating bed..."
      G0 Z300
    {% endif %}
    
    RESPOND MSG="Heating Bed to {BED_TEMP}"
	M190 S{BED_TEMP}
    
    {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" %}
      M117 Moving bed back towards hotend...
      RESPOND MSG="Moving bed back towards hotend..."
      G0 Z5
    {% endif %}


[gcode_macro PREHEAT_EXTRUDER_AND_GENERATE_BEACON_MODEL]
description: Custom GCode that will continue with pre-print steps if extruder is above preheat_extruder_temp instead of waiting for it to cool down
gcode:
  {% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
        {% if printer.extruder.temperature <= printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
            {% set min_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
            {% set max_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float + 50 %}
            M117 Pre-heating extruder...
            RESPOND MSG="Pre-heating extruder..."
            M104 S{min_temp}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
            #20s to stabilize hotend
            G4 P20000
        {% endif %}
  {% endif %}
  M117 Rehoming Z after preheating extruder...
  RESPOND MSG="Rehoming Z after preheating extruder..."
  G28 Z METHOD=CONTACT CALIBRATE=1

[gcode_macro Z_TILT_AND_CONTACT_HOME]
description: Custom GCode that will continue with pre-print steps if extruder is above preheat_extruder_temp instead of waiting for it to cool down
gcode:
  M117 Adjusting Z tilt...
  RESPOND MSG="Adjusting Z tilt..."
  # Adjust bed tilt
  Z_TILT_ADJUST
  M117 Rehoming Z after Z tilt adjustment...
  RESPOND MSG="Rehoming Z after Z tilt adjustment..."
  # Home again as Z will have changed after tilt adjustment and bed heating.
  G28 Z METHOD=CONTACT CALIBRATE=0

[gcode_macro FULLY_HEAT_EXTRUDER]
description: finish heating the extruder to printing temp and then do a beacon contact home
gcode:
    {% set min_temp = params.EXTRUDER_TEMP|float %}
    {% set max_temp = params.EXTRUDER_TEMP|float + 5 %}
	M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}

[gcode_macro INDEPENDENT_PRIME_BLOB]
description: gcode to independently prime, used with Happy Hare firmware
gcode:
	{% set has_offset = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) != 9999.9 %}
	{% if has_offset %}
		ADD_PRIME_PROBE_TO_OFFSET
	{% endif %}
	PRIME_BLOB
	{% if has_offset %}
		SUBTRACT_PRIME_PROBE_FROM_OFFSET
	{% endif %}

[gcode_macro _USER_END_PRINT_AFTER_HEATERS_OFF]
description: Custom gcode that runs right after right before the END_PRINT_AFTER_HEATERS_OFF macro is called in END_PRINT
gcode:
  MAYBE_CLEAR_SKEW_PROFILE
  STOP_CHAMBER_CIRCULATION
  RESTORE_CUSTOM_VARIABLE_DEFAULTS